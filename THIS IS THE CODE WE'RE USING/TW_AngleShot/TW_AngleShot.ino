#include <Wire.h>
#include <Servo.h>
#include <Adafruit_PWMServoDriver.h>

// called this way, it uses the default address 0x40
Adafruit_PWMServoDriver pwm = Adafruit_PWMServoDriver();

//#define SERVOMIN  122 // this is the servo's "zero", don't go below this
//#define SERVOMAX  320 // this is the servo's 90 point. The tests didn't like hitting 180.
// Basically, 

int n = 1;
int j = 1;  

/////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////
int walk2[72] = {
159,171,328,
156,171,326,
153,172,324,
150,172,323,
146,173,322,
143,173,321,
140,173,320,
137,174,319,
133,174,319,
130,174,318,
127,174,318,
124,174,318,
120,174,318,
117,174,318,
114,174,318,
111,174,319,
107,174,319,
104,173,320,
101,173,321,
98,173,322,
94,172,323,
91,172,324,
88,171,326,
85,171,328
};

int lift1[72] = {
34,169,332,
38,175,325,
43,181,319,
47,187,313,
51,193,308,
56,199,303,
61,204,299,
65,210,295,
70,215,291,
75,220,288,
80,226,286,
85,230,284,
88,229,288,
88,220,297,
87,211,307,
87,203,317,
87,194,328,
87,186,340,
87,177,352,
87,168,365,
87,158,379,
87,148,394,
87,137,412,
87,124,432
};

int lift3[72] = {
157,124,432,
157,137,412,
157,148,394,
157,158,379,
157,168,365,
157,177,352,
157,186,340,
157,194,328,
157,203,317,
157,211,307,
156,220,297,
156,229,288,
159,230,284,
164,226,286,
169,220,288,
174,215,291,
179,210,295,
183,204,299,
188,199,303,
193,193,308,
197,187,313,
201,181,319,
206,175,325,
210,169,332
};

int walk1[72] = {
87,124,432,
85,128,424,
83,132,417,
82,135,410,
80,138,403,
78,141,398,
76,144,392,
74,146,387,
72,148,382,
70,150,377,
67,152,373,
65,154,368,
63,156,364,
61,158,361,
58,159,357,
56,161,354,
53,162,350,
51,163,347,
48,164,344,
45,165,342,
43,166,339,
40,167,337,
37,168,334,
34,169,332
};

int walk3[72] = {
210,169,332,
207,168,334,
204,167,337,
201,166,339,
199,165,342,
196,164,344,
193,163,347,
191,162,350,
188,161,354,
186,159,357,
183,158,361,
181,156,364,
179,154,368,
177,152,373,
174,150,377,
172,148,382,
170,146,387,
168,144,392,
166,141,398,
164,138,403,
162,135,410,
161,132,417,
159,128,424,
157,124,432
};

int lift2[72] = {
85,171,328,
87,178,317,
90,186,307,
92,193,298,
95,200,288,
97,208,280,
101,215,271,
104,223,263,
107,231,255,
111,239,247,
115,247,240,
120,256,233,
124,256,233,
129,247,240,
133,239,247,
137,231,255,
140,223,263,
143,215,271,
147,208,280,
149,200,288,
152,193,298,
154,186,307,
157,178,317,
159,171,328
};

int walk6[48] = {
1,141,
3,137,
5,134,
6,131,
7,128,
9,125,
10,123,
11,120,
12,118,
13,116,
14,114,
15,112,
15,110,
16,108,
17,107,
18,105,
18,104,
19,102,
19,101,
20,100,
20,99,
21,98,
21,97,
21,96
};

int lift6[48] = {
21,96,
24,92,
27,90,
30,87,
32,85,
35,82,
37,80,
40,79,
42,77,
45,76,
47,74,
49,74,
48,75,
45,80,
41,84,
37,89,
33,94,
29,99,
25,104,
21,110,
17,117,
12,124,
7,132,
1,141
};
/////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////

int S1A = 0;
int S1B = 1;
int S1C = 2;
int S2A = 3;
int S2B = 4;
int S2C = 5;
int S3A = 6;
int S3B = 7;
int S3C = 8;
int S4A = 9;
int S4B = 10;
int S4C = 11;
int S5A = 12;
int S5B = 13;
int S5C = 14;
int S6A = 15;
Servo S6B;
Servo S6C;

// our servo # counter
uint8_t servonum = 0;
int pulselen;

void setup() {
  Serial.begin(9600);
  Serial.println("16 channel Servo test!");

  S6B.attach(9);
  S6C.attach(10);

  pwm.begin();
  
  pwm.setPWMFreq(60);  // Analog servos run at ~60 Hz updates

}


void loop() {
  for (n = 0; n <= 23; n++) {
    
    // Thinking that the fancy extra offsets to the theta angles are 
    // needed because of the way that I set the theta's initially.
    // Which basically means that we're fucked because of how difficult 
    // the body was to put toget with the angles zeroed a different way. 
    
    pwm.setPWM(S1A, 0, 198+walk1[23*3-(n*3)]);
    pwm.setPWM(S1B, 0, 198+lift1[1+(n*3)]);
    pwm.setPWM(S1C, 0, lift1[2+(n*3)]);
    pwm.setPWM(S2A, 0, 198+walk2[(n*3)]);
    pwm.setPWM(S2B, 0, 198+walk2[1+(n*3)]);
    pwm.setPWM(S2C, 0, walk2[2+(n*3)]);
    pwm.setPWM(S3A, 0, 198+walk3[23*3-(n*3)]);
    pwm.setPWM(S3B, 0, 198+lift3[1+(n*3)]);
    pwm.setPWM(S3C, 0, lift3[2+(n*3)]);

    pwm.setPWM(S4A, 0, 442-walk3[(n*3)]);
    pwm.setPWM(S4B, 0, 442-walk3[1+(n*3)]);
    pwm.setPWM(S4C, 0, 640-walk3[2+(n*3)]);
//    pwm.setPWM(S5A, 0, lift2[23*3-(n*3)]+198);
    pwm.setPWM(S5A, 0 , 442-lift2[(n*3)]);
    pwm.setPWM(S5B, 0, 442-lift2[1+(n*3)]);
    pwm.setPWM(S5C, 0, 640-lift2[2+(n*3)]);
    pwm.setPWM(S6A, 0, 442-walk1[(n*3)]); // +188?
    S6B.write(90-walk6[(n*2)]);
    S6C.write(180-walk6[1+(n*2)]);

    
    
    delay(200);
  }
  n = 0;
  for (n = 0; n <= 23; n ++) {  
    pwm.setPWM(S1A, 0, 198+walk1[(n*3)]);
    pwm.setPWM(S1B, 0, 198+walk1[1+(n*3)]);
    pwm.setPWM(S1C, 0, walk1[2+(n*3)]);
    pwm.setPWM(S2A, 0, 198+lift2[(n*3)]);
    pwm.setPWM(S2B, 0, 198+lift2[1+(n*3)]);
    pwm.setPWM(S2C, 0, lift2[2+(n*3)]);
    pwm.setPWM(S3A, 0, 198+walk3[(n*3)]);
    pwm.setPWM(S3B, 0, 198+walk3[1+(n*3)]);
    pwm.setPWM(S3C, 0, walk3[2+(n*3)]);

    pwm.setPWM(S4A, 0, 442-walk3[23*3-(n*3)]);
    pwm.setPWM(S4B, 0, 442-lift3[1+(n*3)]);
    pwm.setPWM(S4C, 0, 640-lift3[2+(n*3)]);
//    pwm.setPWM(S5A, 0, walk2[23*3-(n*3)]+198);
    pwm.setPWM(S5A, 0 , 442-walk2[(n*3)]);
    pwm.setPWM(S5B, 0, 442-walk2[1+(n*3)]);
    pwm.setPWM(S5C, 0, 640-walk2[2+(n*3)]);
    pwm.setPWM(S6A, 0, 442-walk1[23*3-(n*3)]);
    S6B.write(90-lift6[(n*2)]);
    S6C.write(180-lift6[1+(n*2)]);
    
    delay(200);
  }
  n = 0;
}
